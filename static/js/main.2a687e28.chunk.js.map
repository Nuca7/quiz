{"version":3,"sources":["Context.js","components/Form.js","helperFunctions.js","components/Question.js","components/Modal.js","components/Questions.js","App.js","index.js"],"names":["MyContext","React","createContext","ContextProvider","children","categories","difficulty","useState","amountOfQuestions","category","difficultyLevel","filledForm","setFilledForm","Provider","value","useGlobalContext","useContext","Form","history","useHistory","onSubmit","e","preventDefault","push","className","htmlFor","type","name","id","onChange","Number","target","map","index","getSessionToken","a","fetch","response","json","token","getCategoryID","trivia_categories","filter","trivia_category","Question","question","correct_answer","incorrect_answers","checkAnswer","answers","setAnswers","useEffect","originalArray","array","slice","i","length","j","Math","floor","random","temp","shuffle","decode","answer","onClick","Modal","questionsNumber","correctAnswers","url","Questions","questions","setQuestions","currentIndex","setCurrentIndex","setCorrectAnswers","showModal","setShowModal","sessionToken","categoryID","questionsArray","results","fetchData","increaseIndex","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a687e28.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\n\r\nconst MyContext = React.createContext();\r\n\r\nfunction ContextProvider({ children }) {\r\n  const categories = [\r\n    \"General Knowledge\",\r\n    \"Science: Computers\",\r\n    \"Entertainment: Comics\",\r\n    \"Entertainment: Japanese Anime & Manga\",\r\n    \"Entertainment: Cartoon & Animations\",\r\n    \"Entertainment: Television\",\r\n    \"Art\",\r\n    \"Animals\",\r\n    \"Celebrities\",\r\n  ];\r\n  const difficulty = [\"easy\", \"medium\", \"hard\"];\r\n  const [filledForm, setFilledForm] = useState({\r\n    amountOfQuestions: 10,\r\n    category: categories[0],\r\n    difficultyLevel: difficulty[0],\r\n  });\r\n\r\n  return (\r\n    <MyContext.Provider\r\n      value={{\r\n        categories,\r\n        difficulty,\r\n        filledForm,\r\n        setFilledForm,\r\n      }}\r\n    >\r\n      {children}\r\n    </MyContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useGlobalContext() {\r\n  return useContext(MyContext);\r\n}\r\n\r\nexport { ContextProvider, useGlobalContext };\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Form() {\r\n  const history = useHistory();\r\n  const { categories, difficulty, filledForm, setFilledForm } =\r\n    useGlobalContext();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    history.push(\"/quiz/questions\");\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <form onSubmit={handleSubmit} className=\"quiz-form\">\r\n        <h2>Quiz</h2>\r\n        {/* number of questions */}\r\n        <div>\r\n          <label htmlFor=\"questionsNumber\">Number Of Questions</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"Number of questions:\"\r\n            id=\"questionsNumber\"\r\n            value={filledForm.amountOfQuestions}\r\n            onChange={(e) =>\r\n              setFilledForm({\r\n                ...filledForm,\r\n                amountOfQuestions: Number(e.target.value),\r\n              })\r\n            }\r\n          />\r\n        </div>\r\n        {/* category */}\r\n        <div>\r\n          <label htmlFor=\"category\">Category</label>\r\n          <select\r\n            name=\"category name: \"\r\n            id=\"category\"\r\n            onChange={(e) =>\r\n              setFilledForm({ ...filledForm, category: e.target.value })\r\n            }\r\n          >\r\n            {categories.map((category, index) => {\r\n              // const { id, name } = category;\r\n              return (\r\n                <option key={index} value={category}>\r\n                  {category}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        {/* difficulty */}\r\n        <div>\r\n          <label htmlFor=\"difficultyLevel\">Difficulty</label>\r\n          <select\r\n            name=\"difficulty level: \"\r\n            id=\"difficultyLevel\"\r\n            value={filledForm.difficultyLevel}\r\n            onChange={(e) =>\r\n              setFilledForm({ ...filledForm, difficultyLevel: e.target.value })\r\n            }\r\n          >\r\n            {difficulty.map((difficultyLevel, index) => {\r\n              return (\r\n                <option key={index} value={difficultyLevel}>\r\n                  {difficultyLevel}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n\r\n        <button className=\"submitBtn\" type=\"submit\">\r\n          submit\r\n        </button>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","export async function getSessionToken() {\r\n  const sessionTokenRequestUrl =\r\n    \"https://opentdb.com/api_token.php?command=request\";\r\n  const response = await fetch(sessionTokenRequestUrl);\r\n  const { token } = await response.json();\r\n  return token;\r\n}\r\n\r\nexport async function getCategoryID(category) {\r\n  const response = await fetch(\"https://opentdb.com/api_category.php\");\r\n  const { trivia_categories } = await response.json();\r\n  const { id } = trivia_categories.filter(\r\n    (trivia_category) => trivia_category.name === category\r\n  )[0];\r\n  return id;\r\n}\r\n\r\nexport function shuffle(originalArray) {\r\n  // Fisherâ€“Yates shuffle\r\n  let array = originalArray.slice();\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    let temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n  }\r\n  return array;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { decode } from \"html-entities\";\r\nimport { shuffle } from \"../helperFunctions\";\r\n\r\nfunction Question({\r\n  question,\r\n  correct_answer,\r\n  incorrect_answers,\r\n  checkAnswer,\r\n}) {\r\n  const [answers, setAnswers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!question) return;\r\n    setAnswers(shuffle([correct_answer, ...incorrect_answers]));\r\n  }, [question]);\r\n\r\n  if (!question) {\r\n    return <h2>loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <article className=\"questionContainer\">\r\n      <h2 className=\"question\">{decode(question)}</h2>\r\n      {answers.map((answer, index) => {\r\n        return (\r\n          <button\r\n            className=\"answers\"\r\n            key={index}\r\n            onClick={() => checkAnswer(answer, correct_answer)}\r\n          >\r\n            {decode(answer)}\r\n          </button>\r\n        );\r\n      })}\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Modal({ questionsNumber, correctAnswers }) {\r\n  let history = useHistory();\r\n\r\n  function playAgain() {\r\n    history.push(\"/quiz\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal\">\r\n        <h2>Finished</h2>\r\n        <p>\r\n          You answered {correctAnswers} out of {questionsNumber}\r\n        </p>\r\n        <button onClick={playAgain}>Play Again</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Question from \"./Question\";\r\nimport Modal from \"./Modal\";\r\nimport { getSessionToken } from \"../helperFunctions\";\r\nimport { getCategoryID } from \"../helperFunctions\";\r\nimport { useGlobalContext } from \"../Context\";\r\n\r\nconst url = \"https://opentdb.com/api.php\";\r\n\r\nfunction Questions() {\r\n  const { filledForm } = useGlobalContext();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  async function fetchData() {\r\n    const sessionToken = await getSessionToken();\r\n    const categoryID = await getCategoryID(filledForm.category);\r\n    const response = await fetch(\r\n      `${url}?amount=${filledForm.amountOfQuestions}&category=${categoryID}&difficulty=${filledForm.difficultyLevel}&token=${sessionToken}`\r\n    );\r\n    const { results: questionsArray } = await response.json();\r\n    setQuestions(questionsArray);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  function checkAnswer(answer, correct_answer) {\r\n    if (correct_answer === answer) {\r\n      setCorrectAnswers(correctAnswers + 1);\r\n    }\r\n    increaseIndex(currentIndex);\r\n  }\r\n\r\n  function increaseIndex(currentIndex) {\r\n    if (currentIndex >= questions.length - 1) {\r\n      setShowModal(true);\r\n    } else {\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"questionsContainer\">\r\n      <p>{`${correctAnswers} / ${questions.length}`}</p>\r\n      <Question checkAnswer={checkAnswer} {...questions[currentIndex]} />\r\n      {showModal && (\r\n        <Modal\r\n          questionsNumber={questions.length}\r\n          correctAnswers={correctAnswers}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Questions;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Form from \"./components/Form\";\nimport Questions from \"./components/Questions\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/quiz\">\n          <Form />\n        </Route>\n        <Route exact path=\"/quiz/questions\">\n          <Questions />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ContextProvider } from \"./Context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}